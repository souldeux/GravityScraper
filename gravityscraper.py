import requests
from bs4 import BeautifulSoup

def get_forms_from_page(url):
	"""
	Takes a FQDN, makes a GET request, and returns a ResultSet object (BeautifulSoup) containing
	all form elements on that page that were generated by Gravity Forms
	"""
	print "Requesting HTML..."
	page = requests.get(url)
	print "Loading Parser..."
	soupSpoon = BeautifulSoup(page.text)
	return soupSpoon.findAll('form', id=lambda x: x and x.startswith('gform'))

def get_id_from_form(form):
	"""
	Gets the Gravity Forms form ID# from a form element, which looks like "gform_x" where x is the id
	"""
	return form.get('id').split('_')[1]


def get_inputs_from_form(form):
	"""
	Takes an element from the ResultSet returned by get_forms_from_page and returns only the appropriate
	input elements (those whose 'id' attributes start with 'input')

	Returns a dictionary with {label:id}. For instance, an Email element like this:
	<input id="input_1_2" name="input_2" tabindex="6" type="text" value=""/>
	
	Is from Gravity Forms Form ID# 1, and has Field ID #2 within that form. It comes out looking like this:
		{
			ID: 1,
			Data:
				{
					Email: 2,
					...
				}
		}
	"""
	inputs = form.findAll('input', id = lambda x: x and x.startswith('input'))
	selects = form.findAll('select', id = lambda x: x and x.startswith('input'))
	textareas = form.findAll('textarea', id = lambda x: x and x.startswith('input'))

	fields = inputs + selects + textareas

	#only get label elements whose 'for' attribute starts with 'input'
	labels = form.select('label[for^="input"]')

	form_dict = {
		"ID": get_id_from_form(form),
		"Data": {},
		}


	for f in fields:
		try:
			field_id = f.get('name')[6:] #slice off "input_"
			label_list = [l for l in labels if f.get('id') == l.get('for')]
			try:
				label = label_list.pop()
				form_dict["Data"][label.text] = field_id
			except:
				#no label detected, like for a hidden input
				form_dict["Data"][f.get('id')] = field_id
		except TypeError:
			#field with no name attribute; typically means some jquery shim nonsense. can be safely ignored
			pass

	return form_dict


def get_all_form_dicts_for_url(url):
	forms = get_forms_from_page(url)
	print "{} Gravity Forms detected".format(len(forms))
	print "Parsing Forms..."
	return [get_inputs_from_form(form) for form in forms]

def generate_plugin_text(dict_list):

	text = """<?php
/**
 * Plugin Name: Auto-Generated Third-Party Poster for Gravity Forms
 * Plugin URI: http://souldeux.com
 * Description: Posts GravityForms Form Data to a third party
 * Version: 1.0.0
 * Author: Nick Perry
 * Author URI: http://souldeux.com
 * License: GPL2
 */
		"""
	text += "\n"
	for form_dict in dict_list:
		text += "add_action( 'gform_after_submission_{}', 'post_to_third_party', 10, 2 );\n".format(form_dict["ID"])
	 	text += "function post_to_third_party( $entry, $form ) {\n"
		text += "\t$post_url = 'WEEWOOWEEWOOBETTERNOTLEAVETHISHERE';\n"
		text += "\t$body = array(\n"
		

		for k, v in form_dict["Data"].items():
			text += "\t\t'{}' => rgar( $entry, '{}' ),\n".format(k,v)
    
		text += """
		);
	GFCommon::log_debug( 'gform_after_submission: body => ' . print_r( $body, true ) );

	$request = new WP_Http();
	$response = $request->post( $post_url, array( 'body' => $body ) );
	GFCommon::log_debug( 'gform_after_submission: response => ' . print_r( $response, true ) );
	}\n"""

	text += "?>"
	return text


if __name__ == "__main__":
	url = raw_input("Enter the URL of the page you wish to scrape for forms:\n")
	recipient = raw_input("Enter the URL of the endpoint to which you wish to POST data:\n")
	plugin_text = generate_plugin_text(get_all_form_dicts_for_url(url)).replace("WEEWOOWEEWOOBETTERNOTLEAVETHISHERE", recipient)
	print "Syntax Generated, Creating Plugin..."
	with open("GravityFormsAutoPoster.php", "w+") as file:
		file.write(plugin_text)
	print "Plugin Successfully Generated!"



